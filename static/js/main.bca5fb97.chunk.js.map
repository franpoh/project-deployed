{"version":3,"sources":["config/index.js","API.js","screens/CovidScreen.js","reportWebVitals.js","index.js"],"names":["env","process","config","baseURL","toUpperCase","caseURL","console","log","API","axios","create","headers","CovidScreen","getStatistics","bind","getCountries","selectCountry","state","statistics","cases","countries","country","date","this","event","a","preventDefault","get","res","status","data","response","Date","time","toLocaleString","setState","currentCountry","target","value","className","onSubmit","onChange","selected","disabled","map","population","active","new","critical","recovered","total","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4GAAA,IAAMA,EAAMC,aAERC,EAAS,CACTC,QAAS,yBAIT,OAAQH,EAAII,eACR,IAAK,QACDF,EAAOG,QAAU,0BACjBC,QAAQC,IAAI,uBACZ,MAEJ,IAAK,aACDL,EAAOC,QAAQ,wBACfG,QAAQC,IAAI,4B,2MCLTC,E,OARHC,EAAMC,OAAO,CACrBP,QAAQ,mCACRQ,QAAS,CACL,kBAAmB,2BACnB,iBAAkB,wD,gCCDpBC,E,kDAEF,aAAe,IAAD,8BACV,gBACKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBACrB,EAAKG,MAAQ,CACTC,WAAY,GACZC,MAAO,GACPC,UAAW,GACXC,QAAS,GACTC,KAAM,IAVA,E,qDAcd,WACIC,KAAKR,iB,kEAGT,WAAoBS,GAApB,uBAAAC,EAAA,6DACID,EAAME,iBAEEL,EAAYE,KAAKN,MAAjBI,QAHZ,SAIsBb,EAAImB,IAAJ,8BAA+BN,IAJrD,OAIUO,EAJV,OAMQV,EAAa,GACbC,EAAQ,GACRG,EAAO,GAEQ,MAAfM,EAAIC,SACJX,EAAaU,EAAIE,KAAKC,SAAS,GAC/BZ,EAAQD,EAAWC,MACnBG,EAAO,IAAIU,KAAKd,EAAWe,MAAMC,eAAe,UAGpDX,KAAKY,SAAL,2BACOZ,KAAKN,OADZ,IAEIC,aACAC,QACAG,UAEJhB,QAAQC,IAAI,0BAtBhB,iD,wHAyBA,8BAAAkB,EAAA,sEACsBjB,EAAImB,IAAI,cAD9B,OACUC,EADV,OAGQR,EAAY,GAEG,MAAfQ,EAAIC,SACJT,EAAYQ,EAAIE,KAAKC,UAGzBR,KAAKY,SAAL,2BACOZ,KAAKN,OADZ,IAEIG,eAEJd,QAAQC,IAAI,yBAbhB,gD,wHAgBA,WAAoBiB,GAApB,eAAAC,EAAA,sDACID,EAAME,iBAEAU,EAAiBZ,EAAMa,OAAOC,MACpCf,KAAKY,SAAL,2BACOZ,KAAKN,OADZ,IAEII,QAASe,KAEb9B,QAAQC,IAAI,0BARhB,gD,2EAWA,WACI,IAAQW,EAAeK,KAAKN,MAApBC,WACAC,EAAUI,KAAKN,MAAfE,MACAC,EAAcG,KAAKN,MAAnBG,UACAE,EAASC,KAAKN,MAAdK,KAER,OACI,sBAAKiB,UAAU,UAAf,UACI,+DAAkCrB,EAAWG,WAC7C,uBAAMmB,SAAUjB,KAAKV,cAArB,UACI,sDAEI,yBAAQ0B,UAAU,SAASE,SAAUlB,KAAKP,cAA1C,UACI,wBAAQ0B,UAAQ,EAACC,UAAQ,EAAzB,8BACCvB,EAAUwB,KAAI,SAACvB,GACZ,OAAO,iCAAuBA,GAAVA,YAIhC,+CAEJ,+BACI,8CAAiBH,EAAW2B,cAC5B,gDAAmBvB,KACnB,uBACA,gDAAmBH,EAAM2B,UACzB,uCAAU3B,EAAM4B,OAChB,4CAAe5B,EAAM6B,YACrB,6CAAgB7B,EAAM8B,aACtB,yCAAY9B,EAAM+B,YAEtB,6BAAKhD,IAAOC,iB,GAvGFgD,IAAMC,WA6GjBxC,ICtGAyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bca5fb97.chunk.js","sourcesContent":["const env = process.env.REACT_APP_ENV\r\n\r\nlet config = {\r\n    baseURL: \"http://localhost:3000\",\r\n}\r\n\r\nif (env) {\r\n    switch (env.toUpperCase()) {\r\n        case \"STAGE\":\r\n            config.caseURL = \"http://stage.localhost/\";\r\n            console.log(\"staging environment\");\r\n            break;\r\n        \r\n        case \"PRODUCTION\":\r\n            config.baseURL=\"http://localhost.com/\"\r\n            console.log(\"production environment\");\r\n            break;\r\n    }\r\n}","import axios from \"axios\";\r\n\r\nconst API = axios.create({\r\n    baseURL:\"https://covid-193.p.rapidapi.com\",\r\n    headers: {\r\n        'x-rapidapi-host': 'covid-193.p.rapidapi.com',\r\n        'x-rapidapi-key': 'f675137ff1msh8ae1e95f53ba9a4p1bb6b2jsnc4fcd0c7649b'\r\n    }\r\n});\r\n\r\nexport default API;","import React from \"react\";\r\nimport API from \"../API\";\r\nimport \"../App.css\";\r\nimport config from \"../config/index.js\";\r\n\r\nclass CovidScreen extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.getStatistics = this.getStatistics.bind(this);\r\n        this.getCountries = this.getCountries.bind(this);\r\n        this.selectCountry = this.selectCountry.bind(this);\r\n        this.state = {\r\n            statistics: \"\",\r\n            cases: \"\",\r\n            countries: [],\r\n            country: \"\",\r\n            date: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCountries();\r\n    }\r\n\r\n    async getStatistics(event) {\r\n        event.preventDefault();\r\n\r\n        const { country } = this.state;\r\n        const res = await API.get(`/statistics?country=${country}`);\r\n        \r\n        let statistics = \"\";\r\n        let cases = \"\";\r\n        let date = \"\";\r\n\r\n        if (res.status === 200) {\r\n            statistics = res.data.response[0];\r\n            cases = statistics.cases;\r\n            date = new Date(statistics.time).toLocaleString(\"en-UK\")\r\n        }\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            statistics,\r\n            cases,\r\n            date,\r\n        });\r\n        console.log(\"getStatistics executed\")\r\n    }\r\n\r\n    async getCountries() {\r\n        const res = await API.get(\"/countries\");\r\n        \r\n        let countries = [];\r\n\r\n        if (res.status === 200) {\r\n            countries = res.data.response;\r\n        }\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            countries,\r\n        });\r\n        console.log(\"getCountries executed\")\r\n    }\r\n\r\n    async selectCountry(event) {\r\n        event.preventDefault();\r\n\r\n        const currentCountry = event.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            country: currentCountry,\r\n        });\r\n        console.log(\"selectCountry executed\")\r\n    }\r\n\r\n    render() {\r\n        const { statistics } = this.state;\r\n        const { cases } = this.state;\r\n        const { countries } = this.state;\r\n        const { date } = this.state;\r\n\r\n        return(\r\n            <div className=\"display\">\r\n                <h1>Current Covid Statistics in: {statistics.country}</h1>\r\n                <form onSubmit={this.getStatistics}>\r\n                    <label>\r\n                        Select a Country:\r\n                        <select className=\"select\" onChange={this.selectCountry}>\r\n                            <option selected disabled>Select a Country</option>\r\n                            {countries.map((country) => {\r\n                                return <option key={country}>{country}</option>\r\n                            })}\r\n                        </select>\r\n                    </label>\r\n                    <button>Search</button>\r\n                </form>\r\n                <ul>\r\n                    <li>Population: {statistics.population}</li>\r\n                    <li>Last Updated: {date}</li>\r\n                    <hr />\r\n                    <li>Active Cases: {cases.active}</li>\r\n                    <li>New: {cases.new}</li>\r\n                    <li>Critical: {cases.critical}</li>\r\n                    <li>Recovered: {cases.recovered}</li>\r\n                    <li>Total: {cases.total}</li>\r\n                </ul>\r\n                <h3>{config.baseURL}</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CovidScreen;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CovidScreen from \"./screens/CovidScreen.js\"\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CovidScreen />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}